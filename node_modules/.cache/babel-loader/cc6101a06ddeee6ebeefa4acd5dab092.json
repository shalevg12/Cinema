{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport { firebaseConfig } from './config';\nfirebase.initializeApp(firebaseConfig);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const GoogleProvider = new firebase.auth.GoogleAuthProvider();\nGoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const handleUserProfile = async ({\n  userAuth,\n  additionalData\n}) => {\n  if (!userAuth) return;\n  const {\n    uid\n  } = userAuth;\n  const userRef = firestore.doc(`users/${uid}`);\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const timestamp = new Date();\n    const userRoles = ['user'];\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdDate: timestamp,\n        userRoles,\n        ...additionalData\n      });\n    } catch (err) {//console.log(err);\n    }\n  }\n\n  return userRef;\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};","map":{"version":3,"sources":["/Users/macbook/cinema/src/Firebase/utils.js"],"names":["firebase","firebaseConfig","initializeApp","auth","firestore","GoogleProvider","GoogleAuthProvider","setCustomParameters","prompt","handleUserProfile","userAuth","additionalData","uid","userRef","doc","snapshot","get","exists","displayName","email","timestamp","Date","userRoles","set","createdDate","err","getCurrentUser","Promise","resolve","reject","unsubscribe","onAuthStateChanged"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,SAASC,cAAT,QAA+B,UAA/B;AAGAD,QAAQ,CAACE,aAAT,CAAuBD,cAAvB;AAEA,OAAO,MAAME,IAAI,GAAGH,QAAQ,CAACG,IAAT,EAAb;AACP,OAAO,MAAMC,SAAS,GAAEJ,QAAQ,CAACI,SAAT,EAAjB;AAEP,OAAO,MAAMC,cAAc,GAAG,IAAIL,QAAQ,CAACG,IAAT,CAAcG,kBAAlB,EAAvB;AACPD,cAAc,CAACE,mBAAf,CAAmC;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAAnC;AAEA,OAAO,MAAMC,iBAAiB,GAAG,OAAO;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAP,KAAwC;AACrE,MAAI,CAACD,QAAL,EAAe;AACf,QAAM;AAAEE,IAAAA;AAAF,MAAUF,QAAhB;AACA,QAAMG,OAAO,GAAGT,SAAS,CAACU,GAAV,CAAe,SAAQF,GAAI,EAA3B,CAAhB;AACA,QAAMG,QAAQ,GAAG,MAAMF,OAAO,CAACG,GAAR,EAAvB;;AAEA,MAAG,CAACD,QAAQ,CAACE,MAAb,EAAqB;AACjB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBT,QAA/B;AACA,UAAMU,SAAS,GAAG,IAAIC,IAAJ,EAAlB;AACA,UAAMC,SAAS,GAAG,CAAC,MAAD,CAAlB;;AAEJ,QAAI;AACA,YAAMT,OAAO,CAACU,GAAR,CAAY;AACdL,QAAAA,WADc;AAEdC,QAAAA,KAFc;AAGdK,QAAAA,WAAW,EAAEJ,SAHC;AAIdE,QAAAA,SAJc;AAKd,WAAGX;AALW,OAAZ,CAAN;AAOH,KARD,CAQE,OAAMc,GAAN,EAAW,CACT;AACD;AACF;;AACD,SAAOZ,OAAP;AACH,CAxBM;AA0BP,OAAO,MAAMa,cAAc,GAAG,MAAM;AAChC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,UAAMC,WAAW,GAAG3B,IAAI,CAAC4B,kBAAL,CAAwBrB,QAAQ,IAAI;AACpDoB,MAAAA,WAAW;AACXF,MAAAA,OAAO,CAAClB,QAAD,CAAP;AAEH,KAJmB,EAIjBmB,MAJiB,CAApB;AAKH,GANM,CAAP;AAOH,CARM","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { firebaseConfig } from './config';\n\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const auth = firebase.auth();\nexport const firestore =firebase.firestore();\n\nexport const GoogleProvider = new firebase.auth.GoogleAuthProvider();\nGoogleProvider.setCustomParameters({ prompt: 'select_account' })\n\nexport const handleUserProfile = async ({ userAuth, additionalData }) => {\n    if (!userAuth) return;\n    const { uid } = userAuth;\n    const userRef = firestore.doc(`users/${uid}`);\n    const snapshot = await userRef.get();\n\n    if(!snapshot.exists) {\n        const { displayName, email } = userAuth;\n        const timestamp = new Date();\n        const userRoles = ['user'];\n\n    try {\n        await userRef.set({\n            displayName,\n            email,\n            createdDate: timestamp,\n            userRoles,\n            ...additionalData\n        });\n    } catch(err) {\n        //console.log(err);\n      }\n    }\n    return userRef;\n};\n\nexport const getCurrentUser = () => {\n    return new Promise((resolve, reject) => {\n        const unsubscribe = auth.onAuthStateChanged(userAuth => {\n            unsubscribe();\n            resolve(userAuth);\n\n        }, reject);\n    })\n}"]},"metadata":{},"sourceType":"module"}