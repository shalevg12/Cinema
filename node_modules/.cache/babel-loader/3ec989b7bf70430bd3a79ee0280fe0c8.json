{"ast":null,"code":"import userTypes from './user.types';\nimport { auth, handleUserProfile, GoogleProvider } from './../../Firebase/utils';\nexport const emailSignInStart = userCredentials => ({\n  type: userTypes.EMAIL_SIGN_IN_START,\n  payload: userCredentials\n});\nexport const signInSuccess = user => ({\n  type: userTypes.SIGN_UP_SUCCESS,\n  payload: user\n});\nexport const resetAllAuthForms = () => ({\n  type: userTypes.RESET_AUTH_FORMS\n});\nexport const setCurrentUser = user => ({\n  type: userTypes.SET_CURRENT_USER,\n  payload: user\n}); // export const signInUser = ({email, password }) => async dispatch => {\n//     try {\n//         await auth.signInWithEmailAndPassword(email, password);\n//         dispatch({\n//             type: userTypes.SIGN_IN_SUCCESS,\n//             payload: true\n//         });\n//      } catch(err) {\n//          //colsole.log(err);\n//      }\n// };\n\nexport const signUpUser = ({\n  displayName,\n  email,\n  password,\n  confirmPassword\n}) => async dispatch => {\n  if (password !== confirmPassword) {\n    const err = ['Password Doesn\\'t Match.'];\n    dispatch({\n      type: userTypes.SIGN_UP_ERROR,\n      payload: err\n    });\n    return;\n  }\n\n  try {\n    const {\n      user\n    } = await auth.createUserWithEmailAndPassword(email, password);\n    await handleUserProfile(user, {\n      displayName\n    });\n    dispatch({\n      type: userTypes.SIGN_UP_SUCCESS,\n      payload: true\n    });\n  } catch (err) {// console.log(err)\n  }\n};\nexport const signInWithGoogle = () => async dispatch => {\n  try {\n    await auth.signInWithPopup(GoogleProvider).then(() => {\n      dispatch({\n        type: userTypes.SIGN_IN_SUCCESS,\n        payload: true\n      });\n    });\n  } catch (err) {//console.log(err)\n  }\n};","map":{"version":3,"sources":["/Users/macbook/cinema/src/Redux/User/user.actions.js"],"names":["userTypes","auth","handleUserProfile","GoogleProvider","emailSignInStart","userCredentials","type","EMAIL_SIGN_IN_START","payload","signInSuccess","user","SIGN_UP_SUCCESS","resetAllAuthForms","RESET_AUTH_FORMS","setCurrentUser","SET_CURRENT_USER","signUpUser","displayName","email","password","confirmPassword","dispatch","err","SIGN_UP_ERROR","createUserWithEmailAndPassword","signInWithGoogle","signInWithPopup","then","SIGN_IN_SUCCESS"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,SAASC,IAAT,EAAeC,iBAAf,EAAkCC,cAAlC,QAAwD,wBAAxD;AAGA,OAAO,MAAMC,gBAAgB,GAAGC,eAAe,KAAK;AAChDC,EAAAA,IAAI,EAAEN,SAAS,CAACO,mBADgC;AAEhDC,EAAAA,OAAO,EAAEH;AAFuC,CAAL,CAAxC;AAKP,OAAO,MAAMI,aAAa,GAAGC,IAAI,KAAK;AAClCJ,EAAAA,IAAI,EAAEN,SAAS,CAACW,eADkB;AAElCH,EAAAA,OAAO,EAAEE;AAFyB,CAAL,CAA1B;AA0BP,OAAO,MAAME,iBAAiB,GAAI,OAAO;AACrCN,EAAAA,IAAI,EAAEN,SAAS,CAACa;AADqB,CAAP,CAA3B;AAKP,OAAO,MAAMC,cAAc,GAAGJ,IAAI,KAAK;AACnCJ,EAAAA,IAAI,EAAEN,SAAS,CAACe,gBADmB;AAEnCP,EAAAA,OAAO,EAAEE;AAF0B,CAAL,CAA3B,C,CAMP;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMM,UAAU,GAAG,CAAE;AAACC,EAAAA,WAAD;AAAcC,EAAAA,KAAd;AAAqBC,EAAAA,QAArB;AAA+BC,EAAAA;AAA/B,CAAF,KAAuD,MAAMC,QAAN,IAAkB;AAC3F,MAAGF,QAAQ,KAAKC,eAAhB,EAAgC;AAC5B,UAAME,GAAG,GAAG,CAAC,0BAAD,CAAZ;AACAD,IAAAA,QAAQ,CAAC;AACLf,MAAAA,IAAI,EAAEN,SAAS,CAACuB,aADX;AAELf,MAAAA,OAAO,EAAEc;AAFJ,KAAD,CAAR;AAIA;AACH;;AAED,MAAI;AACA,UAAM;AAAEZ,MAAAA;AAAF,QAAW,MAAMT,IAAI,CAACuB,8BAAL,CAAoCN,KAApC,EAA2CC,QAA3C,CAAvB;AACA,UAAMjB,iBAAiB,CAAEQ,IAAF,EAAQ;AAAEO,MAAAA;AAAF,KAAR,CAAvB;AACAI,IAAAA,QAAQ,CAAC;AACLf,MAAAA,IAAI,EAAEN,SAAS,CAACW,eADX;AAELH,MAAAA,OAAO,EAAE;AAFJ,KAAD,CAAR;AAIH,GAPD,CAOE,OAAMc,GAAN,EAAW,CACT;AACH;AACR,CApBM;AAsBP,OAAO,MAAMG,gBAAgB,GAAG,MAAM,MAAMJ,QAAN,IAAkB;AACpD,MAAI;AACC,UAAMpB,IAAI,CAACyB,eAAL,CAAqBvB,cAArB,EACLwB,IADK,CACA,MAAM;AACTN,MAAAA,QAAQ,CAAC;AACLf,QAAAA,IAAI,EAAEN,SAAS,CAAC4B,eADX;AAELpB,QAAAA,OAAO,EAAE;AAFJ,OAAD,CAAR;AAIF,KANK,CAAN;AAQJ,GATD,CASE,OAAOc,GAAP,EAAY,CACV;AACH;AACJ,CAbM","sourcesContent":["import userTypes from './user.types';\nimport { auth, handleUserProfile, GoogleProvider } from './../../Firebase/utils';\n\n\nexport const emailSignInStart = userCredentials => ({\n    type: userTypes.EMAIL_SIGN_IN_START,\n    payload: userCredentials\n});\n\nexport const signInSuccess = user => ({\n    type: userTypes.SIGN_UP_SUCCESS,\n    payload: user\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport const resetAllAuthForms  = () => ({\n    type: userTypes.RESET_AUTH_FORMS\n});\n\n\nexport const setCurrentUser = user => ({\n    type: userTypes.SET_CURRENT_USER,\n    payload: user\n});\n\n\n// export const signInUser = ({email, password }) => async dispatch => {\n//     try {\n//         await auth.signInWithEmailAndPassword(email, password);\n//         dispatch({\n//             type: userTypes.SIGN_IN_SUCCESS,\n//             payload: true\n//         });\n\n//      } catch(err) {\n//          //colsole.log(err);\n//      }\n// };\n\nexport const signUpUser = ( {displayName, email, password, confirmPassword} ) => async dispatch => {\n        if(password !== confirmPassword){\n            const err = ['Password Doesn\\'t Match.'];\n            dispatch({\n                type: userTypes.SIGN_UP_ERROR,\n                payload: err\n            });\n            return;\n        }\n\n        try {\n            const { user } = await auth.createUserWithEmailAndPassword(email, password);\n            await handleUserProfile( user, { displayName });\n            dispatch({\n                type: userTypes.SIGN_UP_SUCCESS,\n                payload: true\n            });\n        } catch(err) {\n            // console.log(err)\n        }\n};\n\nexport const signInWithGoogle = () => async dispatch => {\n    try {\n         await auth.signInWithPopup(GoogleProvider)\n         .then(() => {\n            dispatch({\n                type: userTypes.SIGN_IN_SUCCESS,\n                payload: true\n            });\n         })\n\n    } catch (err) {\n        //console.log(err)\n    }\n};"]},"metadata":{},"sourceType":"module"}