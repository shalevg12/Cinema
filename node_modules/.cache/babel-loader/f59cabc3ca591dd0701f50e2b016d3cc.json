{"ast":null,"code":"import userTypes from './user.types';\nimport { auth, GoogleProvider } from './../../Firebase/utils';\nexport const emailSignInStart = userCredentials => ({\n  type: userTypes.EMAIL_SIGN_IN_START,\n  payload: userCredentials\n});\nexport const signInSuccess = user => ({\n  type: userTypes.SIGN_IN_SUCCESS,\n  payload: user\n});\nexport const checkUserSession = () => ({\n  type: userTypes.CHEK_USER_SESSION\n});\nexport const signOutUserStart = () => ({\n  type: userTypes.SIGN_OUT_USER_START\n});\nexport const signOutUserSuccess = () => ({\n  type: userTypes.SIGN_OUT_USER_SUCCESS\n});\nexport const signUpUserStart = userCredentials => ({\n  type: userTypes.SIGN_UP_USER_START,\n  payload: userCredentials\n});\nexport const userError = err => ({\n  type: userTypes.USER_ERROR,\n  payload: err\n});\nexport const resetAllAuthForms = () => ({\n  type: userTypes.RESET_AUTH_FORMS\n});\nexport const setCurrentUser = user => ({\n  type: userTypes.SET_CURRENT_USER,\n  payload: user\n}); // export const signInUser = ({email, password }) => async dispatch => {\n//     try {\n//         await auth.signInWithEmailAndPassword(email, password);\n//         dispatch({\n//             type: userTypes.SIGN_IN_SUCCESS,\n//             payload: true\n//         });\n//      } catch(err) {\n//          //colsole.log(err);\n//      }\n// };\n\nexport const signUpUser = ({\n  displayName,\n  email,\n  password,\n  confirmPassword\n}) => async dispatch => {};\nexport const signInWithGoogle = () => async dispatch => {\n  try {\n    await auth.signInWithPopup(GoogleProvider).then(() => {\n      dispatch({\n        type: userTypes.SIGN_IN_SUCCESS,\n        payload: true\n      });\n    });\n  } catch (err) {//console.log(err)\n  }\n};","map":{"version":3,"sources":["/Users/macbook/cinema/src/Redux/User/user.actions.js"],"names":["userTypes","auth","GoogleProvider","emailSignInStart","userCredentials","type","EMAIL_SIGN_IN_START","payload","signInSuccess","user","SIGN_IN_SUCCESS","checkUserSession","CHEK_USER_SESSION","signOutUserStart","SIGN_OUT_USER_START","signOutUserSuccess","SIGN_OUT_USER_SUCCESS","signUpUserStart","SIGN_UP_USER_START","userError","err","USER_ERROR","resetAllAuthForms","RESET_AUTH_FORMS","setCurrentUser","SET_CURRENT_USER","signUpUser","displayName","email","password","confirmPassword","dispatch","signInWithGoogle","signInWithPopup","then"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,SAASC,IAAT,EAAeC,cAAf,QAAqC,wBAArC;AAGA,OAAO,MAAMC,gBAAgB,GAAGC,eAAe,KAAK;AAChDC,EAAAA,IAAI,EAAEL,SAAS,CAACM,mBADgC;AAEhDC,EAAAA,OAAO,EAAEH;AAFuC,CAAL,CAAxC;AAKP,OAAO,MAAMI,aAAa,GAAGC,IAAI,KAAK;AAClCJ,EAAAA,IAAI,EAAEL,SAAS,CAACU,eADkB;AAElCH,EAAAA,OAAO,EAAEE;AAFyB,CAAL,CAA1B;AAKP,OAAO,MAAME,gBAAgB,GAAG,OAAO;AACnCN,EAAAA,IAAI,EAAEL,SAAS,CAACY;AADmB,CAAP,CAAzB;AAIP,OAAO,MAAMC,gBAAgB,GAAG,OAAO;AACnCR,EAAAA,IAAI,EAAEL,SAAS,CAACc;AADmB,CAAP,CAAzB;AAIP,OAAO,MAAMC,kBAAkB,GAAG,OAAO;AACrCV,EAAAA,IAAI,EAAEL,SAAS,CAACgB;AADqB,CAAP,CAA3B;AAIP,OAAO,MAAMC,eAAe,GAAGb,eAAe,KAAK;AAC/CC,EAAAA,IAAI,EAAEL,SAAS,CAACkB,kBAD+B;AAE/CX,EAAAA,OAAO,EAAEH;AAFsC,CAAL,CAAvC;AAKP,OAAO,MAAMe,SAAS,GAAGC,GAAG,KAAK;AAC7Bf,EAAAA,IAAI,EAAEL,SAAS,CAACqB,UADa;AAE7Bd,EAAAA,OAAO,EAAEa;AAFoB,CAAL,CAArB;AAOP,OAAO,MAAME,iBAAiB,GAAI,OAAO;AACrCjB,EAAAA,IAAI,EAAEL,SAAS,CAACuB;AADqB,CAAP,CAA3B;AAKP,OAAO,MAAMC,cAAc,GAAGf,IAAI,KAAK;AACnCJ,EAAAA,IAAI,EAAEL,SAAS,CAACyB,gBADmB;AAEnClB,EAAAA,OAAO,EAAEE;AAF0B,CAAL,CAA3B,C,CAMP;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMiB,UAAU,GAAG,CAAE;AAACC,EAAAA,WAAD;AAAcC,EAAAA,KAAd;AAAqBC,EAAAA,QAArB;AAA+BC,EAAAA;AAA/B,CAAF,KAAuD,MAAMC,QAAN,IAAkB,CAElG,CAFM;AAIP,OAAO,MAAMC,gBAAgB,GAAG,MAAM,MAAMD,QAAN,IAAkB;AACpD,MAAI;AACC,UAAM9B,IAAI,CAACgC,eAAL,CAAqB/B,cAArB,EACLgC,IADK,CACA,MAAM;AACTH,MAAAA,QAAQ,CAAC;AACL1B,QAAAA,IAAI,EAAEL,SAAS,CAACU,eADX;AAELH,QAAAA,OAAO,EAAE;AAFJ,OAAD,CAAR;AAIF,KANK,CAAN;AAQJ,GATD,CASE,OAAOa,GAAP,EAAY,CACV;AACH;AACJ,CAbM","sourcesContent":["import userTypes from './user.types';\nimport { auth, GoogleProvider } from './../../Firebase/utils';\n\n\nexport const emailSignInStart = userCredentials => ({\n    type: userTypes.EMAIL_SIGN_IN_START,\n    payload: userCredentials\n});\n\nexport const signInSuccess = user => ({\n    type: userTypes.SIGN_IN_SUCCESS,\n    payload: user\n});\n\nexport const checkUserSession = () => ({\n    type: userTypes.CHEK_USER_SESSION\n});\n\nexport const signOutUserStart = () => ({\n    type: userTypes.SIGN_OUT_USER_START\n});\n\nexport const signOutUserSuccess = () => ({\n    type: userTypes.SIGN_OUT_USER_SUCCESS\n});\n\nexport const signUpUserStart = userCredentials => ({\n    type: userTypes.SIGN_UP_USER_START,\n    payload: userCredentials\n});\n\nexport const userError = err => ({\n    type: userTypes.USER_ERROR,\n    payload: err\n});\n\n\n\nexport const resetAllAuthForms  = () => ({\n    type: userTypes.RESET_AUTH_FORMS\n});\n\n\nexport const setCurrentUser = user => ({\n    type: userTypes.SET_CURRENT_USER,\n    payload: user\n});\n\n\n// export const signInUser = ({email, password }) => async dispatch => {\n//     try {\n//         await auth.signInWithEmailAndPassword(email, password);\n//         dispatch({\n//             type: userTypes.SIGN_IN_SUCCESS,\n//             payload: true\n//         });\n\n//      } catch(err) {\n//          //colsole.log(err);\n//      }\n// };\n\nexport const signUpUser = ( {displayName, email, password, confirmPassword} ) => async dispatch => {\n\n};\n\nexport const signInWithGoogle = () => async dispatch => {\n    try {\n         await auth.signInWithPopup(GoogleProvider)\n         .then(() => {\n            dispatch({\n                type: userTypes.SIGN_IN_SUCCESS,\n                payload: true\n            });\n         })\n\n    } catch (err) {\n        //console.log(err)\n    }\n};"]},"metadata":{},"sourceType":"module"}