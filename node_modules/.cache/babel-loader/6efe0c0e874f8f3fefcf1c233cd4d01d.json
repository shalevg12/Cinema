{"ast":null,"code":"import { takeLatest, call, all, put } from 'redux-saga/effects';\nimport { auth, handleUserProfile, GoogleProvider } from './../../Firebase/utils';\nimport userTypes from './user.types';\nimport { signInSuccess } from './user.actions';\nexport const resetAllAuthForms = () => ({\n  type: userTypes.RESET_AUTH_FORMS\n});\nexport const setCurrentUser = user => ({\n  type: userTypes.SET_CURRENT_USER,\n  payload: user\n});\nexport const signInUser = ({\n  email,\n  password\n}) => async dispatch => {\n  try {\n    await auth.signInWithEmailAndPassword(email, password);\n    dispatch({\n      type: userTypes.SIGN_IN_SUCCESS,\n      payload: true\n    });\n  } catch (err) {//colsole.log(err);\n  }\n};\nexport const signUpUser = ({\n  displayName,\n  email,\n  password,\n  confirmPassword\n}) => async dispatch => {\n  if (password !== confirmPassword) {\n    const err = ['Password Doesn\\'t Match.'];\n    dispatch({\n      type: userTypes.SIGN_UP_ERROR,\n      payload: err\n    });\n    return;\n  }\n\n  try {\n    const {\n      user\n    } = await auth.createUserWithEmailAndPassword(email, password);\n    await handleUserProfile(user, {\n      displayName\n    });\n    dispatch({\n      type: userTypes.SIGN_UP_SUCCESS,\n      payload: true\n    });\n  } catch (err) {// console.log(err)\n  }\n};\nexport const signInWithGoogle = () => async dispatch => {\n  try {\n    await auth.signInWithPopup(GoogleProvider).then(() => {\n      dispatch({\n        type: userTypes.SIGN_IN_SUCCESS,\n        payload: true\n      });\n    });\n  } catch (err) {//console.log(err)\n  }\n};","map":{"version":3,"sources":["/Users/macbook/cinema/src/Redux/User/user.sagas.js"],"names":["takeLatest","call","all","put","auth","handleUserProfile","GoogleProvider","userTypes","signInSuccess","resetAllAuthForms","type","RESET_AUTH_FORMS","setCurrentUser","user","SET_CURRENT_USER","payload","signInUser","email","password","dispatch","signInWithEmailAndPassword","SIGN_IN_SUCCESS","err","signUpUser","displayName","confirmPassword","SIGN_UP_ERROR","createUserWithEmailAndPassword","SIGN_UP_SUCCESS","signInWithGoogle","signInWithPopup","then"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SAASC,IAAT,EAAeC,iBAAf,EAAkCC,cAAlC,QAAwD,wBAAxD;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,aAAT,QAA8B,gBAA9B;AAGA,OAAO,MAAMC,iBAAiB,GAAI,OAAO;AACrCC,EAAAA,IAAI,EAAEH,SAAS,CAACI;AADqB,CAAP,CAA3B;AAKP,OAAO,MAAMC,cAAc,GAAGC,IAAI,KAAK;AACnCH,EAAAA,IAAI,EAAEH,SAAS,CAACO,gBADmB;AAEnCC,EAAAA,OAAO,EAAEF;AAF0B,CAAL,CAA3B;AAMP,OAAO,MAAMG,UAAU,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAAD,KAAwB,MAAMC,QAAN,IAAkB;AAChE,MAAI;AACA,UAAMf,IAAI,CAACgB,0BAAL,CAAgCH,KAAhC,EAAuCC,QAAvC,CAAN;AACAC,IAAAA,QAAQ,CAAC;AACLT,MAAAA,IAAI,EAAEH,SAAS,CAACc,eADX;AAELN,MAAAA,OAAO,EAAE;AAFJ,KAAD,CAAR;AAKF,GAPF,CAOG,OAAMO,GAAN,EAAW,CACT;AACH;AACL,CAXM;AAaP,OAAO,MAAMC,UAAU,GAAG,CAAE;AAACC,EAAAA,WAAD;AAAcP,EAAAA,KAAd;AAAqBC,EAAAA,QAArB;AAA+BO,EAAAA;AAA/B,CAAF,KAAuD,MAAMN,QAAN,IAAkB;AAC3F,MAAGD,QAAQ,KAAKO,eAAhB,EAAgC;AAC5B,UAAMH,GAAG,GAAG,CAAC,0BAAD,CAAZ;AACAH,IAAAA,QAAQ,CAAC;AACLT,MAAAA,IAAI,EAAEH,SAAS,CAACmB,aADX;AAELX,MAAAA,OAAO,EAAEO;AAFJ,KAAD,CAAR;AAIA;AACH;;AAED,MAAI;AACA,UAAM;AAAET,MAAAA;AAAF,QAAW,MAAMT,IAAI,CAACuB,8BAAL,CAAoCV,KAApC,EAA2CC,QAA3C,CAAvB;AACA,UAAMb,iBAAiB,CAAEQ,IAAF,EAAQ;AAAEW,MAAAA;AAAF,KAAR,CAAvB;AACAL,IAAAA,QAAQ,CAAC;AACLT,MAAAA,IAAI,EAAEH,SAAS,CAACqB,eADX;AAELb,MAAAA,OAAO,EAAE;AAFJ,KAAD,CAAR;AAIH,GAPD,CAOE,OAAMO,GAAN,EAAW,CACT;AACH;AACR,CApBM;AAsBP,OAAO,MAAMO,gBAAgB,GAAG,MAAM,MAAMV,QAAN,IAAkB;AACpD,MAAI;AACC,UAAMf,IAAI,CAAC0B,eAAL,CAAqBxB,cAArB,EACLyB,IADK,CACA,MAAM;AACTZ,MAAAA,QAAQ,CAAC;AACLT,QAAAA,IAAI,EAAEH,SAAS,CAACc,eADX;AAELN,QAAAA,OAAO,EAAE;AAFJ,OAAD,CAAR;AAIF,KANK,CAAN;AAQJ,GATD,CASE,OAAOO,GAAP,EAAY,CACV;AACH;AACJ,CAbM","sourcesContent":["import { takeLatest, call, all, put } from 'redux-saga/effects';\nimport { auth, handleUserProfile, GoogleProvider } from './../../Firebase/utils';\nimport userTypes from './user.types';\nimport { signInSuccess } from './user.actions';\n\n\nexport const resetAllAuthForms  = () => ({\n    type: userTypes.RESET_AUTH_FORMS\n});\n\n\nexport const setCurrentUser = user => ({\n    type: userTypes.SET_CURRENT_USER,\n    payload: user\n});\n\n\nexport const signInUser = ({email, password }) => async dispatch => {\n    try {\n        await auth.signInWithEmailAndPassword(email, password);\n        dispatch({\n            type: userTypes.SIGN_IN_SUCCESS,\n            payload: true\n        });\n\n     } catch(err) {\n         //colsole.log(err);\n     }\n};\n\nexport const signUpUser = ( {displayName, email, password, confirmPassword} ) => async dispatch => {\n        if(password !== confirmPassword){\n            const err = ['Password Doesn\\'t Match.'];\n            dispatch({\n                type: userTypes.SIGN_UP_ERROR,\n                payload: err\n            });\n            return;\n        }\n\n        try {\n            const { user } = await auth.createUserWithEmailAndPassword(email, password);\n            await handleUserProfile( user, { displayName });\n            dispatch({\n                type: userTypes.SIGN_UP_SUCCESS,\n                payload: true\n            });\n        } catch(err) {\n            // console.log(err)\n        }\n};\n\nexport const signInWithGoogle = () => async dispatch => {\n    try {\n         await auth.signInWithPopup(GoogleProvider)\n         .then(() => {\n            dispatch({\n                type: userTypes.SIGN_IN_SUCCESS,\n                payload: true\n            });\n         })\n\n    } catch (err) {\n        //console.log(err)\n    }\n};"]},"metadata":{},"sourceType":"module"}