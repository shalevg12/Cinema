{"ast":null,"code":"import { takeLatest, call, all, put } from 'redux-saga/effects';\nimport { auth, handleUserProfile, getCurrentUser, GoogleProvider } from './../../firebase/utils';\nimport userTypes from './user.types';\nimport { signInSuccess, signOutUserSuccess, resetPasswordSuccess, userError } from './user.actions';\nimport { handleResetPasswordAPI } from './user.helpers';\nexport function* getSnapshotFromUserAuth(user, additionalData = {}) {\n  try {\n    const userRef = yield call(handleUserProfile, {\n      userAuth: user,\n      additionalData\n    });\n    const snapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: snapshot.id,\n      ...snapshot.data()\n    }));\n  } catch (err) {// console.log(err);\n  }\n}\nexport function* emailSignIn({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (err) {// console.log(err);\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(userTypes.EMAIL_SIGN_IN_START, emailSignIn);\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (err) {// console.log(err);\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(userTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* signOutUser() {\n  try {\n    yield auth.signOut();\n    yield put(signOutUserSuccess());\n  } catch (err) {// console.log(err);\n  }\n}\nexport function* onSignOutUserStart() {\n  yield takeLatest(userTypes.SIGN_OUT_USER_START, signOutUser);\n}\nexport function* signUpUser({\n  payload: {\n    displayName,\n    email,\n    password,\n    confirmPassword\n  }\n}) {\n  if (password !== confirmPassword) {\n    const err = ['Password Don\\'t match'];\n    yield put(userError(err));\n    return;\n  }\n\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    const additionalData = {\n      displayName\n    };\n    yield getSnapshotFromUserAuth(user, additionalData);\n  } catch (err) {\n    console.log(err);\n  }\n}\nexport function* onSignUpUserStart() {\n  yield takeLatest(userTypes.SIGN_UP_USER_START, signUpUser);\n}\nexport function* resetPassword({\n  payload: {\n    email\n  }\n}) {\n  try {\n    yield call(handleResetPasswordAPI, email);\n    yield put(resetPasswordSuccess());\n  } catch (err) {\n    yield put(userError(err));\n  }\n}\nexport function* onResetPasswordStart() {\n  yield takeLatest(userTypes.RESET_PASSWORD_START, resetPassword);\n}\nexport function* googleSignIn() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(GoogleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (err) {// console.log(err);\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userTypes.GOOGLE_SIGN_IN_START, googleSignIn);\n}\nexport default function* userSagas() {\n  yield all([call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutUserStart), call(onSignUpUserStart), call(onResetPasswordStart), call(onGoogleSignInStart)]);\n}","map":{"version":3,"sources":["/Users/macbook/Downloads/NewCinema/src/redux/User/user.sagas.js"],"names":["takeLatest","call","all","put","auth","handleUserProfile","getCurrentUser","GoogleProvider","userTypes","signInSuccess","signOutUserSuccess","resetPasswordSuccess","userError","handleResetPasswordAPI","getSnapshotFromUserAuth","user","additionalData","userRef","userAuth","snapshot","get","id","data","err","emailSignIn","payload","email","password","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","isUserAuthenticated","onCheckUserSession","CHECK_USER_SESSION","signOutUser","signOut","onSignOutUserStart","SIGN_OUT_USER_START","signUpUser","displayName","confirmPassword","createUserWithEmailAndPassword","console","log","onSignUpUserStart","SIGN_UP_USER_START","resetPassword","onResetPasswordStart","RESET_PASSWORD_START","googleSignIn","signInWithPopup","onGoogleSignInStart","GOOGLE_SIGN_IN_START","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, call, all, put } from 'redux-saga/effects';\nimport { auth, handleUserProfile, getCurrentUser, GoogleProvider } from './../../firebase/utils';\nimport userTypes from './user.types';\nimport { signInSuccess, signOutUserSuccess, resetPasswordSuccess, userError } from './user.actions';\nimport { handleResetPasswordAPI } from './user.helpers';\n\nexport function* getSnapshotFromUserAuth(user, additionalData = {}) {\n  try {\n    const userRef = yield call(handleUserProfile, { userAuth: user, additionalData });\n    const snapshot = yield userRef.get();\n    yield put(\n      signInSuccess({\n        id: snapshot.id,\n        ...snapshot.data()\n      })\n    );\n\n  } catch (err) {\n    // console.log(err);\n  }\n}\n\nexport function* emailSignIn({ payload: { email, password } }) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n\n  } catch (err) {\n    // console.log(err);\n  }\n}\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(userTypes.EMAIL_SIGN_IN_START, emailSignIn);\n}\n\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n\n  } catch (err) {\n    // console.log(err);\n  }\n}\n\nexport function* onCheckUserSession() {\n  yield takeLatest(userTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport function* signOutUser() {\n  try {\n    yield auth.signOut();\n    yield put(\n      signOutUserSuccess()\n    )\n\n  } catch (err) {\n    // console.log(err);\n  }\n}\n\nexport function* onSignOutUserStart() {\n  yield takeLatest(userTypes.SIGN_OUT_USER_START, signOutUser);\n}\n\nexport function* signUpUser({ payload: {\n  displayName,\n  email,\n  password,\n  confirmPassword\n} }) {\n\n  if (password !== confirmPassword) {\n    const err = ['Password Don\\'t match'];\n    yield put(\n      userError(err)\n    );\n    return;\n  }\n\n  try {\n    const { user } = yield auth.createUserWithEmailAndPassword(email, password);\n    const additionalData = { displayName };\n    yield getSnapshotFromUserAuth(user, additionalData);\n\n  } catch (err) {\n    console.log(err);\n  }\n\n}\n\nexport function* onSignUpUserStart() {\n  yield takeLatest(userTypes.SIGN_UP_USER_START, signUpUser);\n}\n\nexport function* resetPassword({ payload: { email }}) {\n  try {\n    yield call(handleResetPasswordAPI, email);\n    yield put(\n      resetPasswordSuccess()\n    );\n\n  } catch (err) {\n    yield put(\n      userError(err)\n    )\n  }\n}\n\nexport function* onResetPasswordStart() {\n  yield takeLatest(userTypes.RESET_PASSWORD_START, resetPassword);\n}\n\nexport function* googleSignIn() {\n  try {\n    const { user } = yield auth.signInWithPopup(GoogleProvider);\n    yield getSnapshotFromUserAuth(user);\n\n  } catch (err) {\n    // console.log(err);\n  }\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userTypes.GOOGLE_SIGN_IN_START, googleSignIn);\n}\n\n\nexport default function* userSagas() {\n  yield all([\n    call(onEmailSignInStart),\n    call(onCheckUserSession),\n    call(onSignOutUserStart),\n    call(onSignUpUserStart),\n    call(onResetPasswordStart),\n    call(onGoogleSignInStart),\n  ])\n}"]},"metadata":{},"sourceType":"module"}