{"ast":null,"code":"import { firestore } from './../../firebase/utils';\nexport const handleSaveOrder = order => {\n  return new Promise((resolve, reject) => {\n    firestore.collection('orders').doc().set(order).then(() => {\n      resolve();\n    }).catch(err => {\n      reject(err);\n    });\n  });\n};\nexport const handleGetUserOrderHistory = uid => {\n  return new Promise((resolve, reject) => {\n    let ref = firestore.collection('orders').orderBy('orderCreatedDate');\n    ref = ref.where('orderUserID', '==', uid);\n    ref.get().then(snap => {\n      const data = [...snap.docs.map(doc => {\n        return { ...doc.data(),\n          documentID: doc.id\n        };\n      })];\n      resolve({\n        data\n      });\n    }).catch(err => {\n      reject(err);\n    });\n  });\n};\nexport const handleGetOrder = orderID => {\n  return new Promise((resolve, reject) => {\n    firestore.collection('orders').doc(orderID).get().then(snap => {\n      if (snap.exists) {\n        resolve({ ...snap.data(),\n          documentID: orderID\n        });\n      }\n    }).catch(err => {\n      reject(err);\n    });\n  });\n};","map":{"version":3,"sources":["/Users/macbook/Downloads/NewCinema/src/redux/Orders/orders.helpers.js"],"names":["firestore","handleSaveOrder","order","Promise","resolve","reject","collection","doc","set","then","catch","err","handleGetUserOrderHistory","uid","ref","orderBy","where","get","snap","data","docs","map","documentID","id","handleGetOrder","orderID","exists"],"mappings":"AAAA,SAASA,SAAT,QAA0B,wBAA1B;AAEA,OAAO,MAAMC,eAAe,GAAGC,KAAK,IAAI;AACtC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCL,IAAAA,SAAS,CACNM,UADH,CACc,QADd,EAEGC,GAFH,GAGGC,GAHH,CAGON,KAHP,EAIGO,IAJH,CAIQ,MAAM;AACVL,MAAAA,OAAO;AACR,KANH,EAOGM,KAPH,CAOSC,GAAG,IAAI;AACZN,MAAAA,MAAM,CAACM,GAAD,CAAN;AACD,KATH;AAUD,GAXM,CAAP;AAYD,CAbM;AAeP,OAAO,MAAMC,yBAAyB,GAAGC,GAAG,IAAI;AAC9C,SAAO,IAAIV,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,QAAIS,GAAG,GAAGd,SAAS,CAACM,UAAV,CAAqB,QAArB,EAA+BS,OAA/B,CAAuC,kBAAvC,CAAV;AACAD,IAAAA,GAAG,GAAGA,GAAG,CAACE,KAAJ,CAAU,aAAV,EAAyB,IAAzB,EAA+BH,GAA/B,CAAN;AAEAC,IAAAA,GAAG,CACAG,GADH,GAEGR,IAFH,CAEQS,IAAI,IAAI;AACZ,YAAMC,IAAI,GAAG,CACX,GAAGD,IAAI,CAACE,IAAL,CAAUC,GAAV,CAAcd,GAAG,IAAI;AACtB,eAAO,EACL,GAAGA,GAAG,CAACY,IAAJ,EADE;AAELG,UAAAA,UAAU,EAAEf,GAAG,CAACgB;AAFX,SAAP;AAID,OALE,CADQ,CAAb;AASAnB,MAAAA,OAAO,CAAC;AAAEe,QAAAA;AAAF,OAAD,CAAP;AACD,KAbH,EAcGT,KAdH,CAcSC,GAAG,IAAI;AACZN,MAAAA,MAAM,CAACM,GAAD,CAAN;AACD,KAhBH;AAmBD,GAvBM,CAAP;AAwBD,CAzBM;AA2BP,OAAO,MAAMa,cAAc,GAAGC,OAAO,IAAI;AACvC,SAAO,IAAItB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCL,IAAAA,SAAS,CACNM,UADH,CACc,QADd,EAEGC,GAFH,CAEOkB,OAFP,EAGGR,GAHH,GAIGR,IAJH,CAIQS,IAAI,IAAI;AACZ,UAAIA,IAAI,CAACQ,MAAT,EAAiB;AACftB,QAAAA,OAAO,CAAC,EACN,GAAGc,IAAI,CAACC,IAAL,EADG;AAENG,UAAAA,UAAU,EAAEG;AAFN,SAAD,CAAP;AAID;AACF,KAXH,EAYGf,KAZH,CAYSC,GAAG,IAAI;AACZN,MAAAA,MAAM,CAACM,GAAD,CAAN;AACD,KAdH;AAeD,GAhBM,CAAP;AAiBD,CAlBM","sourcesContent":["import { firestore } from './../../firebase/utils';\n\nexport const handleSaveOrder = order => {\n  return new Promise((resolve, reject) => {\n    firestore\n      .collection('orders')\n      .doc()\n      .set(order)\n      .then(() => {\n        resolve();\n      })\n      .catch(err => {\n        reject(err);\n      });\n  });\n};\n\nexport const handleGetUserOrderHistory = uid => {\n  return new Promise((resolve, reject) => {\n    let ref = firestore.collection('orders').orderBy('orderCreatedDate');\n    ref = ref.where('orderUserID', '==', uid);\n\n    ref\n      .get()\n      .then(snap => {\n        const data = [\n          ...snap.docs.map(doc => {\n            return {\n              ...doc.data(),\n              documentID: doc.id\n            }\n          })\n        ];\n\n        resolve({ data });\n      })\n      .catch(err => {\n        reject(err);\n      });\n\n\n  });\n};\n\nexport const handleGetOrder = orderID => {\n  return new Promise((resolve, reject) => {\n    firestore\n      .collection('orders')\n      .doc(orderID)\n      .get()\n      .then(snap => {\n        if (snap.exists) {\n          resolve({\n            ...snap.data(),\n            documentID: orderID\n          })\n        }\n      })\n      .catch(err => {\n        reject(err);\n      })\n  })\n}\n"]},"metadata":{},"sourceType":"module"}