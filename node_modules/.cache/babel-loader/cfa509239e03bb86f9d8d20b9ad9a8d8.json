{"ast":null,"code":"import userTypes from './user.types';\nimport { auth, handleUserProfile, GoogleProvider } from './../../Firebase/utils';\nexport const setCurrentUser = user => ({\n  type: userTypes.SET_CURRENT_USER,\n  payload: user\n});\nexport const signInUser = ({\n  email,\n  password\n}) => async dispatch => {\n  try {\n    await auth.signInWithEmailAndPassword(email, password);\n    dispatch({\n      type: userTypes.SIGN_IN_SUCCESS,\n      payload: true\n    });\n  } catch (err) {//console.log(err)\n  }\n};\nexport const signUpUser = ({\n  displayName,\n  email,\n  password,\n  confirmPassword\n}) => async dispatch => {\n  if (password !== confirmPassword) {\n    const err = ['Password Doesn\\'t Match.'];\n    dispatch({\n      type: userTypes.SIGN_UP_ERROR,\n      payload: err\n    });\n    return;\n  }\n\n  try {\n    const {\n      user\n    } = await auth.createUserWithEmailAndPassword(email, password);\n    await handleUserProfile(user, {\n      displayName\n    });\n    dispatch({\n      type: userTypes.SIGN_UP_SUCCESS,\n      payload: true\n    });\n  } catch (err) {// console.log(err)\n  }\n};\nexport const signInWithGoogle = () => async dispatch => {\n  try {\n    await auth.signInWithPopup(GoogleProvider).then(() => {\n      dispatch({\n        type: userTypes.SIGN_UP_SUCCESS,\n        payload: true\n      });\n    });\n  } catch (err) {//console.log(err);\n  }\n};","map":{"version":3,"sources":["/Users/macbook/cinema/src/Redux/User/user.actions.js"],"names":["userTypes","auth","handleUserProfile","GoogleProvider","setCurrentUser","user","type","SET_CURRENT_USER","payload","signInUser","email","password","dispatch","signInWithEmailAndPassword","SIGN_IN_SUCCESS","err","signUpUser","displayName","confirmPassword","SIGN_UP_ERROR","createUserWithEmailAndPassword","SIGN_UP_SUCCESS","signInWithGoogle","signInWithPopup","then"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,SAASC,IAAT,EAAeC,iBAAf,EAAkCC,cAAlC,QAAwD,wBAAxD;AAEA,OAAO,MAAMC,cAAc,GAAGC,IAAI,KAAK;AACnCC,EAAAA,IAAI,EAAEN,SAAS,CAACO,gBADmB;AAEnCC,EAAAA,OAAO,EAAEH;AAF0B,CAAL,CAA3B;AAKP,OAAO,MAAMI,UAAU,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAyB,MAAMC,QAAN,IAAkB;AACjE,MAAI;AAEA,UAAMX,IAAI,CAACY,0BAAL,CAAgCH,KAAhC,EAAuCC,QAAvC,CAAN;AACAC,IAAAA,QAAQ,CAAC;AACLN,MAAAA,IAAI,EAAEN,SAAS,CAACc,eADX;AAELN,MAAAA,OAAO,EAAE;AAFJ,KAAD,CAAR;AAMH,GATD,CASE,OAAMO,GAAN,EAAW,CACT;AACH;AACJ,CAbM;AAeP,OAAO,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeP,EAAAA,KAAf;AAAsBC,EAAAA,QAAtB;AAAgCO,EAAAA;AAAhC,CAAD,KAAuD,MAAMN,QAAN,IAAkB;AAC3F,MAAGD,QAAQ,KAAKO,eAAhB,EAAgC;AAC5B,UAAMH,GAAG,GAAG,CAAC,0BAAD,CAAZ;AACAH,IAAAA,QAAQ,CAAC;AACLN,MAAAA,IAAI,EAAEN,SAAS,CAACmB,aADX;AAELX,MAAAA,OAAO,EAAEO;AAFJ,KAAD,CAAR;AAIA;AACH;;AAED,MAAI;AAEA,UAAM;AAAEV,MAAAA;AAAF,QAAW,MAAMJ,IAAI,CAACmB,8BAAL,CAAoCV,KAApC,EAA2CC,QAA3C,CAAvB;AAEA,UAAMT,iBAAiB,CAAEG,IAAF,EAAQ;AAAEY,MAAAA;AAAF,KAAR,CAAvB;AACAL,IAAAA,QAAQ,CAAC;AACLN,MAAAA,IAAI,EAAEN,SAAS,CAACqB,eADX;AAELb,MAAAA,OAAO,EAAE;AAFJ,KAAD,CAAR;AAKH,GAVD,CAUE,OAAMO,GAAN,EAAW,CACT;AAEH;AAER,CAzBM;AA2BP,OAAO,MAAMO,gBAAgB,GAAG,MAAM,MAAMV,QAAN,IAAkB;AAEpD,MAAG;AACC,UAAMX,IAAI,CAACsB,eAAL,CAAqBpB,cAArB,EACDqB,IADC,CACI,MAAM;AACRZ,MAAAA,QAAQ,CAAC;AACLN,QAAAA,IAAI,EAAEN,SAAS,CAACqB,eADX;AAELb,QAAAA,OAAO,EAAE;AAFJ,OAAD,CAAR;AAIH,KANC,CAAN;AAOH,GARD,CAQE,OAAMO,GAAN,EAAW,CACT;AACH;AAEJ,CAdM","sourcesContent":["import userTypes from './user.types';\nimport { auth, handleUserProfile, GoogleProvider } from './../../Firebase/utils';\n\nexport const setCurrentUser = user => ({\n    type: userTypes.SET_CURRENT_USER,\n    payload: user\n});\n\nexport const signInUser = ({ email, password }) => async dispatch => {\n    try {\n\n        await auth.signInWithEmailAndPassword(email, password);\n        dispatch({\n            type: userTypes.SIGN_IN_SUCCESS,\n            payload: true\n        });\n\n\n    } catch(err) {\n        //console.log(err)\n    }\n};\n\nexport const signUpUser = ({ displayName, email, password, confirmPassword }) => async dispatch => {\n        if(password !== confirmPassword){\n            const err = ['Password Doesn\\'t Match.'];\n            dispatch({\n                type: userTypes.SIGN_UP_ERROR,\n                payload: err\n            });\n            return;\n        }\n\n        try {\n\n            const { user } = await auth.createUserWithEmailAndPassword(email, password);\n\n            await handleUserProfile( user, { displayName });\n            dispatch({\n                type: userTypes.SIGN_UP_SUCCESS,\n                payload: true\n            });\n\n        } catch(err) {\n            // console.log(err)\n\n        }\n\n};\n\nexport const signInWithGoogle = () => async dispatch => {\n\n    try{\n        await auth.signInWithPopup(GoogleProvider)\n            .then(() => {\n                dispatch({\n                    type: userTypes.SIGN_UP_SUCCESS,\n                    payload: true\n                });\n            })\n    } catch(err) {\n        //console.log(err);\n    }\n\n};\n"]},"metadata":{},"sourceType":"module"}