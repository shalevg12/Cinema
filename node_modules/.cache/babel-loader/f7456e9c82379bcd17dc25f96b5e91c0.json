{"ast":null,"code":"import { takeLatest, call, all, put, take } from 'redux-saga/effects';\nimport { auth, handleUserProfile, getCurrentUser, GoogleProvider } from './../../Firebase/utils';\nimport userTypes from './user.types';\nimport { signInSuccess, signOutUserSuccess } from './user.actions';\nexport function* getSnapshotFromUserAuth(user) {\n  try {\n    const userRef = yield call(handleUserProfile, {\n      userAuth: user\n    });\n    const snapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: snapshot.id,\n      ...snapshot.data()\n    }));\n  } catch (err) {// console.log(err);\n  }\n}\nexport function* emailSignIn({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (err) {//colsole.log(err);\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(userTypes.EMAIL_SIGN_IN_START, emailSignIn);\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (err) {//console.log(err);\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(userTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* signOutUSer() {\n  try {\n    yield auth.signOut();\n    yield put(signOutUserSuccess());\n  } catch (err) {// conole.log(err);\n  }\n}\nexport function* onSignOutUserStart() {\n  yield takeLatest(userTypes.SIGN_OUT_USER_START, signOutUSer);\n}\nexport default function* userSagas() {\n  yield all([call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutUserStart)]);\n}","map":{"version":3,"sources":["/Users/macbook/cinema/src/Redux/User/user.sagas.js"],"names":["takeLatest","call","all","put","take","auth","handleUserProfile","getCurrentUser","GoogleProvider","userTypes","signInSuccess","signOutUserSuccess","getSnapshotFromUserAuth","user","userRef","userAuth","snapshot","get","id","data","err","emailSignIn","payload","email","password","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","isUserAuthenticated","onCheckUserSession","CHECK_USER_SESSION","signOutUSer","signOut","onSignOutUserStart","SIGN_OUT_USER_START","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,QAAiD,oBAAjD;AACA,SAASC,IAAT,EAAeC,iBAAf,EAAkCC,cAAlC,EAAkDC,cAAlD,QAAwE,wBAAxE;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,aAAT,EAAwBC,kBAAxB,QAAkD,gBAAlD;AAGA,OAAO,UAAUC,uBAAV,CAAkCC,IAAlC,EAAwC;AAC3C,MAAI;AACA,UAAMC,OAAO,GAAG,MAAMb,IAAI,CAACK,iBAAD,EAAoB;AAAES,MAAAA,QAAQ,EAAEF;AAAZ,KAApB,CAA1B;AACA,UAAMG,QAAQ,GAAG,MAAMF,OAAO,CAACG,GAAR,EAAvB;AACA,UAAMd,GAAG,CACLO,aAAa,CAAC;AACVQ,MAAAA,EAAE,EAAEF,QAAQ,CAACE,EADH;AAEV,SAAGF,QAAQ,CAACG,IAAT;AAFO,KAAD,CADR,CAAT;AAMH,GATD,CASE,OAAMC,GAAN,EAAW,CACT;AACH;AACJ;AAGD,OAAO,UAAUC,WAAV,CAAsB;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAAtB,EAAwD;AAC3D,MAAI;AACA,UAAM;AAAEX,MAAAA;AAAF,QAAW,MAAMR,IAAI,CAACoB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMZ,uBAAuB,CAACC,IAAD,CAA7B;AAEF,GAJF,CAIG,OAAMO,GAAN,EAAW,CACT;AACH;AACL;AAED,OAAO,UAAUM,kBAAV,GAA+B;AAClC,QAAM1B,UAAU,CAACS,SAAS,CAACkB,mBAAX,EAAgCN,WAAhC,CAAhB;AACH;AAED,OAAO,UAAUO,mBAAV,GAAgC;AACnC,MAAI;AACA,UAAMb,QAAQ,GAAG,MAAMR,cAAc,EAArC;AACA,QAAG,CAACQ,QAAJ,EAAc;AACd,UAAMH,uBAAuB,CAACG,QAAD,CAA7B;AAEH,GALD,CAKE,OAAMK,GAAN,EAAU,CACR;AACH;AACJ;AAED,OAAO,UAAUS,kBAAV,GAA+B;AAClC,QAAM7B,UAAU,CAACS,SAAS,CAACqB,kBAAX,EAA+BF,mBAA/B,CAAhB;AACH;AAED,OAAO,UAAUG,WAAV,GAAwB;AAC3B,MAAI;AACA,UAAM1B,IAAI,CAAC2B,OAAL,EAAN;AACA,UAAM7B,GAAG,CACLQ,kBAAkB,EADb,CAAT;AAIH,GAND,CAME,OAAMS,GAAN,EAAU,CACR;AACH;AAEJ;AAED,OAAO,UAAUa,kBAAV,GAA+B;AAClC,QAAMjC,UAAU,CAACS,SAAS,CAACyB,mBAAX,EAAgCH,WAAhC,CAAhB;AACH;AAED,eAAe,UAAUI,SAAV,GAAsB;AACjC,QAAMjC,GAAG,CAAE,CAACD,IAAI,CAACyB,kBAAD,CAAL,EAA2BzB,IAAI,CAAC4B,kBAAD,CAA/B,EAAqD5B,IAAI,CAACgC,kBAAD,CAAzD,CAAF,CAAT;AACH","sourcesContent":["import { takeLatest, call, all, put, take } from 'redux-saga/effects';\nimport { auth, handleUserProfile, getCurrentUser, GoogleProvider } from './../../Firebase/utils';\nimport userTypes from './user.types';\nimport { signInSuccess, signOutUserSuccess } from './user.actions';\n\n\nexport function* getSnapshotFromUserAuth(user) {\n    try {\n        const userRef = yield call(handleUserProfile, { userAuth: user });\n        const snapshot = yield userRef.get();\n        yield put(\n            signInSuccess({\n                id: snapshot.id,\n                ...snapshot.data()\n             })\n        );\n    } catch(err) {\n        // console.log(err);\n    }\n}\n\n\nexport function* emailSignIn({ payload: { email, password } }) {\n    try {\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\n        yield getSnapshotFromUserAuth(user)\n\n     } catch(err) {\n         //colsole.log(err);\n     }\n}\n\nexport function* onEmailSignInStart() {\n    yield takeLatest(userTypes.EMAIL_SIGN_IN_START, emailSignIn);\n}\n\nexport function* isUserAuthenticated() {\n    try {\n        const userAuth = yield getCurrentUser();\n        if(!userAuth) return;\n        yield getSnapshotFromUserAuth(userAuth);\n\n    } catch(err){\n        //console.log(err);\n    }\n}\n\nexport function* onCheckUserSession() {\n    yield takeLatest(userTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport function* signOutUSer() {\n    try {\n        yield auth.signOut();\n        yield put(\n            signOutUserSuccess()\n        )\n\n    } catch(err){\n        // conole.log(err);\n    }\n\n}\n\nexport function* onSignOutUserStart() {\n    yield takeLatest(userTypes.SIGN_OUT_USER_START, signOutUSer);\n}\n\nexport default function* userSagas() {\n    yield all ([call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutUserStart)])\n}"]},"metadata":{},"sourceType":"module"}